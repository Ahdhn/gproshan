#include "che_ply.h"

#include <fstream>
#include <vector>
#include <cstring>
#include <cassert>


che_ply::che_ply(const string & file)
{
	init(file);
}

void che_ply::read_file(const string & file)
{
	size_t n_v, n_f;

	string line, word;
	
	ifstream is(file);
	assert(is.good());

	while(getline(is, line) && line != "end_header")
	{
		stringstream ss(line);

		ss >> word;
		if(word == "element")
		{
			ss >> word;
			if(word == "vertex") ss >> n_v;
			if(word == "face") ss >> n_f;
		}

		if(word == "format")
		{
			ss >> word;
			assert(word == "ascii");
		}
	}
	
	init(n_v, n_f);
	
	for(index_t v = 0; v < n_vertices_; v++)
	{
		getline(is, line);
		stringstream ss(line);
	
		ss >> GT[v];
	}
	
	index_t p, he = 0;
	while(n_f--)
	{
		getline(is, line);
		stringstream ss(line);
		
		ss >> p;
		while(p--) ss >> VT[he++];
	}

	is.close();
}

void che_ply::write_file(const che * mesh, const string & file)
{
	ofstream os(file + ".ply");
	
	os << "ply" << endl;
	os << "format ascii 1.0" << endl;
	os << "comment generated by gproshan 2019" << endl;
	os << "element vertex " << mesh->n_vertices() << endl;
	os << "property float x" << endl;
	os << "property float y" << endl;
	os << "property float z" << endl;
	os << "element face " << mesh->n_faces() << endl;
	os << "property list uchar int vertex_index" << endl;
	os << "end_header" << endl;

	for(size_t v = 0; v < mesh->n_vertices(); v++)
		os << mesh->gt(v) << endl;

	for(index_t he = 0; he < mesh->n_half_edges(); )
	{
		os << che::P;
		for(index_t i = 0; i < che::P; i++)
			os << " " << mesh->vt(he++);
		os << endl;
	}

	os.close();
}

